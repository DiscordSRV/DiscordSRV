# This is an /advanced/ feature of DiscordSRV that allows you to send messages to Discord when a game event happens
# or when a command is run. You will need a working knowledge of how Bukkit events work and their properties.
# If you aren't sure about what you're doing here, maybe ask a developer or join our support server @ discordsrv.com/discord
#
# Référencez vous au Bukkit API javadoc pour trouver les events et leurs propriétés:
#  https://hub.spigotmc.org/javadocs/bukkit
# Ressources utiles pour apprendre les expressions SpEL:
#  https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/expressions.html
#  https://dzone.com/articles/learn-spring-expression-language-with-examples
#
# Vous pouvez suivre ces placeholders:
#  {tps} - TPS du serveur
#  {time} - temps formatée
#  {date} - date formatée
#  {name} - si l'alert est pour un event d'un joueur, le nom du joueur
#  {ping} - si l'alert est pour un event d'un joueur, le ping du joueur
#  {username} - si l'alert est pour un event d'un joueur, le nom d'utilisateur du joueur
#  {displayname} - si l'alert est pour un event d'un joueur, le nom d'affichage du joueur
#  {usernamenoescapes} - si l'alert est pour un event d'un joueur, le nom d'utilisateur du joueur sans échapper le format discord
#  {displaynamenoescapes} - si l'alert est pour un event d'un joueur, le nom d'affichage du joueur sans échapper le format discord
#  {world} - si l'alert est pour un event d'un joueur, le monde actuel du joueur
#  {embedavatarurl} - si l'alert est pour un event d'un joueur, l'avatar url du skin du joueur, sinon, l'avatar url du bot
#  {botavatarurl} - l'avatar url du bot
#  {botname} - le nom du bot
#  %placeholder% - n'importe PlaceholderAPI placeholders, vous pouvez seulement utiliser les placeholders qui nécessitent un joueur lors d'un event d'un joueur
#
# Vous pouvez aussi utiliser les expressions SpEL avec ${expression...}, comme par exemple..
#  - Avoir l'IP d'un joueur: ${#player.address.address.hostAddress}
#  - Avoir le gamemode d'un joueur ${#player.gameMode.name()}
#  - Avoir l'ID du compte discord liée d'un joueur: ${#discordsrv.accountLinkManager.getDiscordId(#player.uniqueId)}
#  - Avoir le nombre de joueurs connectés: ${#server.onlinePlayers.size()}
#  - Avoir le statut de la connection entre DiscordSRV et Discord: ${#jda.status.name()}
#  - Vérifier si un joueur est dans un monde: ${#player.world.name == 'world_the_end'}
#  - Vérifier si il fait jour dans le monde où le joeur est: ${#player.world.time > 0 && #player.world.time < 13000}
#  You can use the following expression placeholders, as seen above:
#   #plugins.<plugin> - the specified plugin instance, null if doesn't exist
#   #event - the event that's triggering the alert if this alert is an event alert
#   #server - the Bukkit API server instance, equivalent to Bukkit#getServer
#   #discordsrv - the DiscordSRV plugin instance
#   #player - the player that the event is for, if this is a player event or command
#   #sender - the command sender, if this is a command alert
#   #command - the full command, with no leading slash, if this is a command alert
#   #args - the command arguments, if this is a command alert
#   #allArgs - the command arguments as one string, if this is a command alert
#   #channel - the destination channel for this alert
#   #jda - DiscordSRV's JDA instance that it uses to communicate with Discord
#
# Syntax/defaults:
#  - Trigger: <event name or /command>
#    Async: true # optional, defaults to true, you should almost never have to change this
#    Conditions:
#      - property == < > <= >= value etc
#    Channel: <discordsrv channel name>
#    IgnoreCancelled: true # only for event alerts
#    Content: ""
#    Webhook:
#      Enabled: false
#      AvatarUrl: "{botavatarurl}"
#      Name: "{botname}"
#    Embed:
#      Enabled: true
#      Color: "#00ff00" # accepts a hex color code (eg. "#ffffff") or a rgb integer (eg. 0)
#      Author:
#        ImageUrl: "{embedavatarurl}"
#        Name: "{username} did... something."
#        Url: ""
#      ThumbnailUrl: ""
#      Title:
#        Text: ""
#        Url: ""
#      Description: ""
#      Fields: [] # format is "title;value;inline" (eg. "Who joined?;%displayname%;true") or "blank" to add a blank field
#      ImageUrl: ""
#      Footer:
#        Text: ""
#        IconUrl: ""
#      Timestamp: false # set to true to use the time the message was sent or use a epoch timestamp for a specific time (https://www.epochconverter.com/)
#
Alerts:
  # Example config to send messages to the "fish" DiscordSRV channel when a player successfully catches a fish
  #- Trigger: PlayerFishEvent
  #  Channel: fish
  #  Conditions:
  #    - state.name() == 'CAUGHT_FISH'
  #  Embed:
  #    Color: "#00ff00"
  #    Author:
  #      ImageUrl: "{embedavatarurl}"
  #      Name: "{name} caught a ${caught.itemStack.type.name()}!"

  # Example config to send Matrix anti-cheat messages
  #- Trigger: PlayerViolationEvent
  #  Channel: matrix
  #  Conditions:
  #    - violations >= 5 # don't send events for players with < 5 violations
  #  Embed:
  #    Color: "#ff0000"
  #    Author:
  #      ImageUrl: "{embedavatarurl}"
  #      Name: "{username} failed ${hackType.name().toLowerCase()} check | ${component} | vl:${violations} ping:${player.handle.ping} tps:{tps}"

  # Example config to send /gamemode messages
  #- Trigger: /gamemode
  #  Channel: gamemode
  #  Conditions:
  #    - '#player.hasPermission("minecraft.command.gamemode") == true'
  #  Embed:
  #    Color: "#ff0000"
  #    Author:
  #      ImageUrl: "{embedavatarurl}"
  #      Name: "{username} changed gamemode to ${#args.get(0)}"

  # Example config to send /me commands
  #- Trigger: /me
  #  Channel: me
  #  Conditions:
  #    - '#player.hasPermission("minecraft.command.me") == true || #player.hasPermission("essentials.me") == true'
  #  Embed:
  #    Color: "#00ff00"
  #    Author:
  #      ImageUrl: "{embedavatarurl}"
  #      Name: "* {username} ${#allArgs}"
